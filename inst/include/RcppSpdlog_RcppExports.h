// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_RcppSpdlog_RCPPEXPORTS_H_GEN_
#define RCPP_RcppSpdlog_RCPPEXPORTS_H_GEN_

#include <Rcpp.h>

namespace RcppSpdlog {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("RcppSpdlog", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("RcppSpdlog", "_RcppSpdlog_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in RcppSpdlog");
            }
        }
    }

    inline void log_setup(const std::string& name = "default", const std::string& level = "warn") {
        typedef SEXP(*Ptr_log_setup)(SEXP,SEXP);
        static Ptr_log_setup p_log_setup = NULL;
        if (p_log_setup == NULL) {
            validateSignature("void(*log_setup)(const std::string&,const std::string&)");
            p_log_setup = (Ptr_log_setup)R_GetCCallable("RcppSpdlog", "_RcppSpdlog_log_setup");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_log_setup(Shield<SEXP>(Rcpp::wrap(name)), Shield<SEXP>(Rcpp::wrap(level)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
    }

    inline void log_drop(const std::string& name) {
        typedef SEXP(*Ptr_log_drop)(SEXP);
        static Ptr_log_drop p_log_drop = NULL;
        if (p_log_drop == NULL) {
            validateSignature("void(*log_drop)(const std::string&)");
            p_log_drop = (Ptr_log_drop)R_GetCCallable("RcppSpdlog", "_RcppSpdlog_log_drop");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_log_drop(Shield<SEXP>(Rcpp::wrap(name)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
    }

    inline void log_set_pattern(const std::string& s) {
        typedef SEXP(*Ptr_log_set_pattern)(SEXP);
        static Ptr_log_set_pattern p_log_set_pattern = NULL;
        if (p_log_set_pattern == NULL) {
            validateSignature("void(*log_set_pattern)(const std::string&)");
            p_log_set_pattern = (Ptr_log_set_pattern)R_GetCCallable("RcppSpdlog", "_RcppSpdlog_log_set_pattern");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_log_set_pattern(Shield<SEXP>(Rcpp::wrap(s)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
    }

    inline void log_set_level(const std::string& s) {
        typedef SEXP(*Ptr_log_set_level)(SEXP);
        static Ptr_log_set_level p_log_set_level = NULL;
        if (p_log_set_level == NULL) {
            validateSignature("void(*log_set_level)(const std::string&)");
            p_log_set_level = (Ptr_log_set_level)R_GetCCallable("RcppSpdlog", "_RcppSpdlog_log_set_level");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_log_set_level(Shield<SEXP>(Rcpp::wrap(s)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
    }

    inline void log_trace(const std::string& s) {
        typedef SEXP(*Ptr_log_trace)(SEXP);
        static Ptr_log_trace p_log_trace = NULL;
        if (p_log_trace == NULL) {
            validateSignature("void(*log_trace)(const std::string&)");
            p_log_trace = (Ptr_log_trace)R_GetCCallable("RcppSpdlog", "_RcppSpdlog_log_trace");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_log_trace(Shield<SEXP>(Rcpp::wrap(s)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
    }

    inline void log_debug(const std::string& s) {
        typedef SEXP(*Ptr_log_debug)(SEXP);
        static Ptr_log_debug p_log_debug = NULL;
        if (p_log_debug == NULL) {
            validateSignature("void(*log_debug)(const std::string&)");
            p_log_debug = (Ptr_log_debug)R_GetCCallable("RcppSpdlog", "_RcppSpdlog_log_debug");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_log_debug(Shield<SEXP>(Rcpp::wrap(s)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
    }

    inline void log_info(const std::string& s) {
        typedef SEXP(*Ptr_log_info)(SEXP);
        static Ptr_log_info p_log_info = NULL;
        if (p_log_info == NULL) {
            validateSignature("void(*log_info)(const std::string&)");
            p_log_info = (Ptr_log_info)R_GetCCallable("RcppSpdlog", "_RcppSpdlog_log_info");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_log_info(Shield<SEXP>(Rcpp::wrap(s)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
    }

    inline void log_warn(const std::string& s) {
        typedef SEXP(*Ptr_log_warn)(SEXP);
        static Ptr_log_warn p_log_warn = NULL;
        if (p_log_warn == NULL) {
            validateSignature("void(*log_warn)(const std::string&)");
            p_log_warn = (Ptr_log_warn)R_GetCCallable("RcppSpdlog", "_RcppSpdlog_log_warn");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_log_warn(Shield<SEXP>(Rcpp::wrap(s)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
    }

    inline void log_error(const std::string& s) {
        typedef SEXP(*Ptr_log_error)(SEXP);
        static Ptr_log_error p_log_error = NULL;
        if (p_log_error == NULL) {
            validateSignature("void(*log_error)(const std::string&)");
            p_log_error = (Ptr_log_error)R_GetCCallable("RcppSpdlog", "_RcppSpdlog_log_error");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_log_error(Shield<SEXP>(Rcpp::wrap(s)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
    }

    inline void log_critical(const std::string& s) {
        typedef SEXP(*Ptr_log_critical)(SEXP);
        static Ptr_log_critical p_log_critical = NULL;
        if (p_log_critical == NULL) {
            validateSignature("void(*log_critical)(const std::string&)");
            p_log_critical = (Ptr_log_critical)R_GetCCallable("RcppSpdlog", "_RcppSpdlog_log_critical");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_log_critical(Shield<SEXP>(Rcpp::wrap(s)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
    }

}

#endif // RCPP_RcppSpdlog_RCPPEXPORTS_H_GEN_
